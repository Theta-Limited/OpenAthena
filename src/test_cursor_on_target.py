import unittest
import xml.etree.ElementTree as ET
from unittest.mock import patch, MagicMock, mock_open
from cursor_on_target import create_uid, build_cot_xml, calculate_ce, get_stale_period, create_device_uid, get_and_increment_serial

class TestCursorOnTarget(unittest.TestCase):

     @patch('cursor_on_target.open', new_callable=mock_open, read_data='42')
    def test_get_and_increment_serial(self, mock_file):
        # Test reading existing value
        self.assertEqual(get_and_increment_serial(), 43)
        mock_file().write.assert_called_once_with('43')

        # Test file not found scenario
        mock_file.side_effect = FileNotFoundError
        self.assertEqual(get_and_increment_serial(), 1)
        mock_file().write.assert_called_with('1')

    @patch('cursor_on_target.get_and_increment_serial')
    @patch('cursor_on_target.DEVICE_UID', 'TEST01')
    def test_create_uid(self, mock_get_serial):
        mock_get_serial.return_value = 44
        uid = create_uid()
        
        # Check the format of the UID
        pattern = r'^OpenAthena-[A-Z]{4,6}\d{2}-44$'
        self.assertTrue(re.match(pattern, uid), f"UID {uid} does not match the expected pattern")
        
        # Verify each part of the UID
        parts = uid.split('-')
        self.assertEqual(parts[0], 'OpenAthena')
        self.assertTrue(len(parts[1]) in [6, 7, 8, 9])  # NATO word (4-7 chars) + 2 digits
        self.assertTrue(parts[1][:-2].isalpha() and parts[1][-2:].isdigit())
        self.assertEqual(parts[2], '44')

        mock_get_serial.assert_called_once()

        uid2 = create_uid()
        self.assertNotEqual(uid, uid2)

    def test_build_cot_xml(self):
        lat, lon, alt, theta = 40.7128, -74.0060, 10.0, 45
        image_timestamp = "2023-07-08T12:00:00Z"
        stale_period = 180
        
        xml_string = build_cot_xml(lat, lon, alt, theta, image_timestamp, stale_period)
        
        # Parse the XML string
        root = ET.fromstring(xml_string)
        
        # Check root element attributes
        self.assertEqual(root.tag, 'event')
        self.assertEqual(root.attrib['version'], '2.0')
        self.assertTrue(root.attrib['uid'].startswith('OpenAthena-'))
        self.assertEqual(root.attrib['type'], 'a-p-G')
        self.assertEqual(root.attrib['how'], 'h-c')
        self.assertEqual(root.attrib['time'], image_timestamp)
        
        # Check time attributes (format only, not exact values)
        time_pattern = r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z'
        self.assertTrue(re.match(time_pattern, root.attrib['time']))
        self.assertTrue(re.match(time_pattern, root.attrib['start']))
        self.assertTrue(re.match(time_pattern, root.attrib['stale']))
        
        # Check point element
        point = root.find('point')
        self.assertIsNotNone(point)
        self.assertEqual(float(point.attrib['lat']), lat)
        self.assertEqual(float(point.attrib['lon']), lon)
        self.assertEqual(float(point.attrib['hae']), alt)
        self.assertAlmostEqual(float(point.attrib['ce']), calculate_ce(theta), places=2)
        self.assertEqual(float(point.attrib['le']), 5.9)
        
        # Check detail element
        detail = root.find('detail')
        self.assertIsNotNone(detail)
        precisionlocation = detail.find('precisionlocation')
        self.assertIsNotNone(precisionlocation)
        self.assertEqual(precisionlocation.attrib['altsrc'], 'DTED2')
        self.assertEqual(precisionlocation.attrib['geopointsrc'], 'GPS')
        
        remarks = detail.find('remarks')
        self.assertIsNotNone(remarks)
        self.assertEqual(remarks.text, 'Generated by OpenAthena from sUAS data')

    def test_calculate_ce(self):
        theta = 45
        le = 5.9
        expected_ce = le
        self.assertAlmostEqual(calculate_ce(theta, le), expected_ce, places=2)

    @patch('argparse.ArgumentParser.parse_args')
    @patch('cursor_on_target.config')
    def test_get_stale_period(self, mock_config, mock_args):
        # Test command line argument
        mock_args.return_value = MagicMock(stale=400)
        self.assertEqual(get_stale_period(), 400)

        # Test config file
        mock_args.return_value = MagicMock(stale=None)
        mock_config.STALE_PERIOD = 500
        self.assertEqual(get_stale_period(), 500)

        # Test default value
        del mock_config.STALE_PERIOD
        self.assertEqual(get_stale_period(), 180)

    def test_create_device_uid(self):
        uid = create_device_uid()
        self.assertIsInstance(uid, str)
        self.assertTrue(len(uid) in [6, 7, 8, 9])  # NATO word (4-7 chars) + 2 digits
        self.assertTrue(uid[:2].isalpha() and uid[-2:].isdigit()) 

if __name__ == '__main__':
    unittest.main()