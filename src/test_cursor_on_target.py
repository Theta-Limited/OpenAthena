import unittest
import xml.etree.ElementTree as ET
from cursor_on_target import create_uid, build_cot_xml
import re

class TestCursorOnTarget(unittest.TestCase):

    def test_create_uid(self):
        # Test that create_uid generates a unique identifier
        uid1 = create_uid()
        uid2 = create_uid()
        
        # Check that UIDs are strings
        self.assertIsInstance(uid1, str)
        self.assertIsInstance(uid2, str)
        
        # Check that UIDs start with 'OpenAthena-'
        self.assertTrue(uid1.startswith('OpenAthena-'))
        self.assertTrue(uid2.startswith('OpenAthena-'))
        
        # Check that UIDs are different
        self.assertNotEqual(uid1, uid2)
        
        # Check that the UUID part is a valid UUID4
        uuid_pattern = r'^OpenAthena-[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
        self.assertTrue(re.match(uuid_pattern, uid1))
        self.assertTrue(re.match(uuid_pattern, uid2))

    def test_build_cot_xml(self):
        lat, lon, alt, ce, le = 40.7128, -74.0060, 10.0, 5.0, 2.0
        xml_string = build_cot_xml(lat, lon, alt, ce, le)
        
        # Parse the XML string
        root = ET.fromstring(xml_string)
        
        # Check root element attributes
        self.assertEqual(root.tag, 'event')
        self.assertEqual(root.attrib['version'], '2.0')
        self.assertTrue(root.attrib['uid'].startswith('OpenAthena-'))
        self.assertEqual(root.attrib['type'], 'a-p-G')
        self.assertEqual(root.attrib['how'], 'h-c')
        
        # Check time attributes (format only, not exact values)
        time_pattern = r'\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z'
        self.assertTrue(re.match(time_pattern, root.attrib['time']))
        self.assertTrue(re.match(time_pattern, root.attrib['start']))
        self.assertTrue(re.match(time_pattern, root.attrib['stale']))
        
        # Check point element
        point = root.find('point')
        self.assertIsNotNone(point)
        self.assertEqual(float(point.attrib['lat']), lat)
        self.assertEqual(float(point.attrib['lon']), lon)
        self.assertEqual(float(point.attrib['hae']), alt)
        self.assertEqual(float(point.attrib['ce']), ce)
        self.assertEqual(float(point.attrib['le']), le)
        
        # Check detail element
        detail = root.find('detail')
        self.assertIsNotNone(detail)
        precisionlocation = detail.find('precisionlocation')
        self.assertIsNotNone(precisionlocation)
        self.assertEqual(precisionlocation.attrib['altsrc'], 'DTED2')
        self.assertEqual(precisionlocation.attrib['geopointsrc'], 'GPS')
        
        remarks = detail.find('remarks')
        self.assertIsNotNone(remarks)
        self.assertEqual(remarks.text, 'Generated by OpenAthena from sUAS data')

if __name__ == '__main__':
    unittest.main()